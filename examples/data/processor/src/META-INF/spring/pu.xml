<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:os-core="http://openspaces.gigaspaces.org/schema/core"
       xmlns:os-events="http://openspaces.gigaspaces.org/schema/events"
       xmlns:os-remoting="http://openspaces.gigaspaces.org/schema/remoting"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://openspaces.gigaspaces.org/schema/core http://openspaces.gigaspaces.org/schema/10.2/core/openspaces-core.xsd
       http://openspaces.gigaspaces.org/schema/events http://openspaces.gigaspaces.org/schema/10.2/events/openspaces-events.xsd
       http://openspaces.gigaspaces.org/schema/remoting http://openspaces.gigaspaces.org/schema/10.2/remoting/openspaces-remoting.xsd">

    <!--
        Spring propery configurer which allows us to use system properties (such as user.name).
    -->
    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

    <context:annotation-config />

    <!--
        Scan for components (both Spring ones and OpenSpaces ones)
    -->
    <context:component-scan base-package="org.openspaces.example.data"/>

    <!--
        Enables the usage of @GigaSpaceContext annotation based injection.
    -->
    <os-core:giga-space-context/>
    
    <!--
        Enables using @Polling and @Notify annotations
    -->
    <os-events:annotation-support />

    <!--
        Enables using @RemotingService as well as @SyncProxy (and others) annotations
    -->
    <os-remoting:annotation-support />

    <!--
        A bean representing a space (an IJSpace implementation).

        Note, we do not specify here the cluster topology of the space. It is declated outside of
        the processing unit or within the SLA bean.
    -->
    <os-core:embedded-space id="space" name="space" />

    <!--
        Defines a distributed transaction manager.
    -->
    <os-core:distributed-tx-manager id="transactionManager"/>

    <!--
        OpenSpaces simplified space API built on top of IJSpace/JavaSpace.
    -->
    <os-core:giga-space id="gigaSpace" space="space" tx-manager="transactionManager"/>

    <!--
        A context loader loading a Spring applicaiton context defined by the location only when
        this processing unit instance is primary (in a primary backup scenario).
    -->
    <os-core:refreshable-context-loader id="modeExample" location="classpath:/META-INF/spring/mode/mode.xml"/>

    <os-remoting:service-exporter id="serviceExporter">
        <os-remoting:service ref="modeExample"/>
    </os-remoting:service-exporter>

    <!--
        Remoting supprt exporting the data processor for remoting invocation using OpenSpaces Remoting.

        Note, remoting is based on the different event containers and provides an event listner that
        exports a list of services for remote invocations. In our case, the data processor is exposed.

        Also note, using notifications instead of polling takes is just a matter of configuraion. Changing
        to notify container means just changing the xml element name, and setting two attributes to true:
        perform-take-on-notify and ignore-event-on-null-take.
    -->
    <os-events:polling-container id="remotingContainer" giga-space="gigaSpace" concurrent-consumers="2">
        <os-events:listener ref="serviceExporter"/>
    </os-events:polling-container>
</beans>
